parameters:
  platform: none
  installer: none

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
    architecture: 'x64'
  displayName: 'Use Python $(python.version)'
  condition: and(succeeded(), ne(variables['python.version'], 'Pre'))

- task: stevedower.python.InstallPython.InstallPython@1
  displayName: 'Use prerelease Python'
  inputs:
    prerelease: true
  condition: and(succeeded(), eq(variables['python.version'], 'Pre'))

- ${{ if eq(parameters.installer, 'nuget') }}:
  - task: NuGetToolInstaller@0
    displayName: 'Use latest available Nuget'

  - script: |
      nuget install zlib-msvc14-x64 -ExcludeVersion -OutputDirectory "$(build.BinariesDirectory)"
      echo ##vso[task.prependpath]$(build.BinariesDirectory)\zlib-msvc14-x64\build\native\bin_release

    displayName: 'Install dependencies with nuget'

- ${{ if eq(parameters.installer, 'brew') }}:
  - script: |
      brew cask install xquartz
      brew install pkg-config ffmpeg imagemagick mplayer ccache
    displayName: 'Install dependencies with brew'

- ${{ if eq(parameters.installer, 'apt') }}:
  - script: |
      sudo apt-add-repository ppa:jonathonf/ffmpeg-3
      sudo apt-get update
      sudo apt-get install \
        cm-super \
        dvipng \
        ffmpeg \
        gdb \
        gir1.2-gtk-3.0 \
        graphviz \
        inkscape \
        libcairo2 \
        libgeos-dev \
        libgirepository-1.0.1 \
        lmodern \
        otf-freefont \
        pgf \
        texlive-fonts-recommended \
        texlive-latex-base \
        texlive-latex-extra \
        texlive-latex-recommended \
        texlive-xetex texlive-luatex
    displayName: 'Install dependencies with apt'

- script: |

    python -m pip install --upgrade pip
    pip install -r requirements/testing/travis_all.txt -r requirements/testing/travis36.txt

  displayName: 'Install dependencies with pip'

- script: |

    pip install -ve .

  displayName: "Install self"
  env:
    MPLLOCALFREETYPE: 1

- script: env
  displayName: 'print env'

- script: |
    env
    pytest --junitxml=junit/test-results.xml -raR --maxfail=50 --timeout=300 --durations=25 --cov-report= --cov=lib -n 2
  displayName: 'pytest'
  env:
    PYTHONFAULTHANDLER: 1

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-results.xml'
    testRunTitle: 'Python $(python.version)'
  condition: succeededOrFailed()
